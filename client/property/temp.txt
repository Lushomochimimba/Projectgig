import React from 'react';
import {Meteor} from 'meteor/meteor';
import {Session} from 'meteor/session';
import {withTracker} from 'meteor/react-meteor-data';
import {Listproperty} from '../../lib/collections';
import {UserFiles} from '../../lib/collections.js';
import FileUpload from '../fileupload/Uploadfile.jsx';
import Footer from '../Footer';
import Navbar from '../Navbar';

class Property extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      propertyName: '',
      type: '',
      location: '',
      phoneNumber: '',
      price: '',
      description: ''
    }
  }

  handleSubmit = (e) => {
    e.preventDefault();
    const attempt = Session.get('imageId');
    const currentUserId = Meteor.userId()
    const properties = {
      imageId: attempt,
      owner: Meteor.userId(),
      propertyName: this.state.propertyName,
      category: this.state.type,
      location: this.state.location,
      phoneNumber: this.state.phoneNumber,
      price: this.state.price,
      description: this.state.description
    }
    Meteor.call('property.create', properties);
    console.log('property created')
    FlowRouter.go('/profile')
  }

  handlePropertyNameChange = (e) => {
    this.setState({propertyName: e.target.value})
  }

  handleTypeChange = (e) => {
    this.setState({type: e.target.value})
  }

  handleLocationChange = (e) => {
    this.setState({location: e.target.value})
  }

  handlephoneNumberChange = (e) => {
    this.setState({phoneNumber: e.target.value})
  }

  handlePriceChange = (e) => {
    this.setState({price: e.target.value})
  }

  handleDescriptionChange = (e) => {
    this.setState({description: e.target.value})
  }

  render() {

    let {imagePreviewUrl} = this.state;
    let $imagePreview = null;
    if (imagePreviewUrl) {
      $imagePreview = (<img src={imagePreviewUrl} style={{
        width: 100 + "px",
        height: 100 + "px"
      }}/>);
    } else {
      $imagePreview = (
        <div className="previewText">Please select an Image for Preview<br/></div>
      );
    }

    return (

      <div>
        <Navbar/>
        <div id="new-card" className="section">
          <div className="container">
            <div className="row">
              <div className="col s12 m6 card-style">
                <div className="card">
                  <h5 className="default_color_text card-title center">
                    Add Property</h5>
                  <div className="card-content">
                    <form className="col s12" onSubmit={Property.handleSubmit}>
                      <div className="row">
                        <div className="input-field col s12">
                          {/* <FileUpload className="white-text" fileName = {this.state.propertyName} /> */}
                        </div>
                      </div>
                      <div className="row">
                        <div className="input-field col s12">
                          <input id="propertyname" onChange={this.handlePropertyNameChange} type="text" name='propertyname'/>
                          <label htmlFor="propertyname">property name</label>
                        </div>
                      </div>
                      <div className="row">
                        <div className="input-field col s12">
                          <input id="type" onChange={this.handleTypeChange} type="text" name='type'/>
                          <label htmlFor="type">type</label>
                        </div>
                      </div>
                      <div className="row">
                        <div className="input-field col s12">
                          <input id="location" onChange={this.handleLocationChange} type="text" name='location'/>
                          <label htmlFor="location">Location</label>
                        </div>
                      </div>
                      <div className="row">
                        <div className="input-field col s12">
                          <input id="price" onChange={this.handlePriceChange} type="text" name='price'/>
                          <label htmlFor="price">Price</label>
                        </div>
                      </div>
                      <div className="row">
                        <div className="input-field col s12">
                          <input id="description" onChange={this.handleDescriptionChange} type="text" name='description'/>
                          <label htmlFor="description">Description</label>
                        </div>
                      </div>
                      <div className="row">
                        <div className="input-field col s12">
                          <input id="contact" onChange={this.handleContactChange} type="text" name='contact'/>
                          <label htmlFor="price">contact</label>
                        </div>
                      </div>
                      <button className="btn waves-effect waves-light submit-button center" type="submit" name="action">Submit</button>
                    </form>
                    <a href="/registration" className={`${this.props.registration} link`}>create an account?</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <Footer/>
      </div>

    );
  }
}

export default withTracker(() => {
  Meteor.subscribe('files.all');
  return {files: Listproperty.find({}, {
      sort: {
        name: 1
      }
    }).fetch()}

})(Property);
